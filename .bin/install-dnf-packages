#!/usr/bin/env bash
# Script created on: 2024-06-24 17:31:26
# Script path: /home/ywatanabe/.dotfiles/.bin/install-dnf-packages.sh

install-gin-client() {
    install-git-annex-using-cabal

    ORIG_DIR=$PWD
    cd /tmp
    wget https://gin.g-node.org/G-Node/gin-cli-releases/raw/master/gin-cli-latest-linux.tar.gz
    tar xvf gin-cli-latest-linux.tar.gz
    sudo mv gin /usr/local/bin
    gin --version
    gin login # ywatanabe1989
    cd $ORIG_DIR
}


install-git-annex-using-cabal() {
    install-basics

    # Install required dependencies
    sudo dnf install -y \
        alex \
        bzip2-devel \
        cabal-install \
        file \
        file-devel \
        file-libs \
        gcc \
        ghc \
        gnutls-devel \
        happy \
        libgsasl-devel \
        libidn-devel \
        libxml2-devel \
        make \
        openssl-devel \
        xz-devel \
        zlib-devel

    # Update cabal
    cabal update

    # Set BINDIR
    BINDIR=$HOME/.cabal/bin

    # Install c2hs
    cabal install --bindir=$BINDIR c2hs

    # Configure cabal with explicit library paths
    cabal configure --extra-include-dirs=/usr/include --extra-lib-dirs=/usr/lib64

    # Install git-annex
    cabal install --bindir=$BINDIR git-annex

    # Update PATH
    export PATH=$BINDIR:$PATH

    # Add PATH update to .bashrc if not already present
    grep -qxF 'export PATH=$HOME/.cabal/bin:$PATH' $HOME/.bashrc || echo 'export PATH=$HOME/.cabal/bin:$PATH' >> $HOME/.bashrc

    # Verify installation
    git-annex --version
}


install-gin-client() {
    ORIG_DIR=$PWD
    cd /tmp
    wget https://gin.g-node.org/G-Node/gin-cli-releases/raw/master/gin-cli-latest-linux.tar.gz
    tar xvf gin-cli-latest-linux.tar.gz
    sudo mv gin /usr/local/bin
    gin --version
    gin login # ywatanabe1989
    cd $ORIG_DIR
}

# install-gh() {
#     -gh-install-ubuntu() {
#         (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
#             && sudo mkdir -p -m 755 /etc/apt/keyrings \
#             && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
#             && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
#             && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
#             && sudo apt update \
#             && sudo apt install gh -y
#     }

#     -gh-install-rocky() {
#         curl -fsSL https://cli.github.com/packages/rpm/gh-cli.repo | sudo tee /etc/yum.repos.d/github-cli.repo
#         sudo dnf -y install gh
#         }

#     if-os "ubuntu" -gh-install-ubuntu
#     if-os "rocky" -gh-install-rocky
# }

install-gh() {
    curl -fsSL https://cli.github.com/packages/rpm/gh-cli.repo | tee /etc/yum.repos.d/github-cli.repo
    dnf -y install gh

    gh --version
}

install-basics() {
    dnf -y update

    dnf -y install setup

    # Install Development Tools group
    sudo dnf groupinstall -y "Development Tools"

    dnf -y groupinstall "Development Tools"
    dnf -y install dnf-plugins-core
    dnf -y install epel-release
    sudo dnf install -y powertools
    dnf config-manager --set-enabled powertools
    dnf config-manager --add https://negativo17.org/repos/epel-multimedia.repo

    # Install EPEL repository if not already installed
    sudo dnf config-manager --set-enabled powertools # For Rocky Linux 8
    sudo dnf config-manager --set-enabled crb # For Rocky Linux 9

    dnf -y upgrade
}

install-dnf-packages () {
    dnf update

    dnf -y install libffi
    dnf -y install libffi-devel
    dnf -y install mesa-libGL
    dnf -y install mesa-libGL-devel
    dnf -y install glibc
    dnf -y install glibc-devel
    dnf -y install htop && htop --version
    dnf -y install ffmpeg
    dnf -y install ffmpeg-devel
    dnf -y install ripgrep && rg --version
    dnf -y install portaudio
    dnf -y install portaudio-devel
    dnf -y install git && git --version
    dnf -y install emacs && emacs --version
    dnf -y install openssl
    dnf -y install openssl-devel
    dnf -y install wget && wget --version
    dnf -y install gcc && gcc --version
    dnf -y install make && make --version
    dnf -y install sshpass
    dnf -y install langpacks-en glibc-all-langpacks
    dnf -y install which
    dnf -y install clear
    dnf -y install tldr && python3 -m pip install tldr
    dnf -y install langpacks-en glibc-langpack-en

    dnf -y upgrade
}

install-tree () {
    wget https://gitlab.com/OldManProgrammer/unix-tree/-/archive/2.1.1/unix-tree-2.1.1.tar.bz2
    tar -xjvf unix-tree-2.1.1.tar.bz2
    cd unix-tree-2.1.1
    make -j32
    make -j32 install PREFIX=/usr/local
    cd ..
    rm -rf unix-tree*

    tree --version
}

install-autossh() {
    dnf install
    wget http://www.harding.motd.ca/autossh/autossh-1.4e.tgz
    tar -xf autossh-1.4e.tgz
    cd autossh-1.4e
    ./configure
    make -j32
    make -j32 install PREFIX=/usr/local
    cd ..
    rm autossh* -rf

    authossh --version
}

install-git-crypt () {
    git clone https://github.com/AGWA/git-crypt.git
    cd git-crypt
    make -j 32
    make install -j 32 PREFIX=/usr/local

    git-crypt --version
}

main () {
    install-basics
    install-dnf-packages
    # After the basic installations are completed.
    install-tree
    install-autossh
    install-git-crypt
    install-gh
}

main

# EOF
